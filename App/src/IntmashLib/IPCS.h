#ifndef IPCS_H_
#define IPCS_H_


#include "Intmash_bastypes.h"//Используем наши типы данных

/*
Структура управления тиристорным преобразователем (на 6 импульсов макс)
Создаётся по одной структуре на каждый мост (6 тиристоров), управляются независимо

Структура содержит:
tU8*  PulseQueue - указатель на массив очереди импульсов управления. Для самых распостраненных типов 
выпрямителей есть встроенные таблицы, указатель задается функцией инициализации структуры. 
Используется только функциями модуля.

tU8*  SyncQueueIndex - указатель на массив индексов синхроимпульсов в очереди импульсов управления. 
Необходим для нахождения нужного импульса управления в очереди импульсов в зависимости от текущего
сигнала синхронизации. Указатель задается функцией инициализации в зависимости от чередования фаз.
Используется только функциями модуля.

tF32  AlphaShift - положительное смещеие угла в градусах, зависит от типа выпрямителя. Задается 
функцией инициализации в зависимости от чередования фаз. Используется только функциями модуля.

tU8   AlphaSector - номер сектора угла (сектор равен 60 градусов). Используется только функциями модуля.

tU8   WidthRemain - признак того, что при начале нового сектора остается импульс от старого. 
Используется только функциями модуля.

tU8   ExpectedThyristors - импульсы, ожидающие выставления в текущем секторе. 
Используется только функциями модуля.

tU8   ThyristorControl - переменная, которая содержит флаги импульсов управления, определения битов ниже 
описания структуры. Флаги выставляются функциями модуля, используется вне модуля для управления 
импульсами управления.

tU16 TimeClear - время, через которое нужно сбросить сигналы. В условных единицах времени (тики таймера,
отмеряющего время). Задается функциями модуля, используется вне модуля для таймером.

tU16 TimeSet - время, через которое нужно выставить нужные сигналы.В условных единицах времени (тики таймера,
отмеряющего время). Задается функциями модуля, используется вне модуля для таймером.
*/
typedef struct{
  tU8*  PulseQueue;
  tU8*  SyncQueueIndex;	
  tF32  AlphaShift;
  tU8   AlphaSector;
  tU8   WidthRemain;   
  tU8   ExpectedThyristors;
  
  tU8   ThyristorControl;  
  tU16  TimeClear;
  tU16  TimeSet;

} IPCScontrolStruct;
#define THY_CONTROL_AP 1
#define THY_CONTROL_AM 2
#define THY_CONTROL_BP 4
#define THY_CONTROL_BM 8
#define THY_CONTROL_CP 16
#define THY_CONTROL_CM 32

/*
Функция начальной инициализации структуры СИФУ.
tU8 SyncSignalsSequence - чередование фаз. Нормальное или Реверсное.
tU8 RectifierType - тип выпрямителя (поддерживаемые типы описаны ниже).
IPCScontrolStruct* IPCS - указатель на инициализируемую структуру.
*/
void IPCSinit(tU8 SyncSignalsSequence, tU8 RectifierType, IPCScontrolStruct* IPCS);
#define SYNC_SEQUENCE_NORMAL  0
#define SYNC_SEQUENCE_REVERSE 1

#define FULL_BRIDGE_RECTIFIER    0
#define FULL_SEMISTOR_RECTIFIER  2

/*
Функция пересчета нового угла управления в градусах в управляющие параметры СИФУ.
tF32 Alpha - угол управления в градусах.
tF32 PulseWidth - ширина импульса управления в градусах.
tU16 SectorTimTicks - размер сектора в 60 градусов в тиках таймера (для расчетов).
IPCScontrolStruct* IPCS - указатель на настраеваемую стректуру.
*/
void IPCSsetAlpha(tF32 Alpha, tF32 PulseWidth, tU16 SectorTimTicks, IPCScontrolStruct* IPCS);

/*
Основная функция работы СИФУ.
Вызывается в прерывании по синхроимпульсу.
Определяет что делать с сигналами в начале сектора, определяет какие импульсы
устанавливаются в текущем секторе.
tU8 SyncSource - какой синхроимпульс вызвал функцию, перечислены ниже.
IPCScontrolStruct* IPCS - указатель на настраеваемую стректуру.
*/
void IPCSprocessing(tU8 SyncSource, IPCScontrolStruct* IPCS);
#define SYNC_SOURCE_A_RISE 0
#define SYNC_SOURCE_A_FALL 1
#define SYNC_SOURCE_B_RISE 2
#define SYNC_SOURCE_B_FALL 3
#define SYNC_SOURCE_C_RISE 4
#define SYNC_SOURCE_C_FALL 5

/*
Выставление ожидающих включения сигналов управления.
Функция вызывается в прерывании по таймеру 
*/
void IPCSsetPulse(IPCScontrolStruct* IPCS);
/*
Сброс всех сигналов управления.
Функция вызывается в прерывании по таймеру
*/
void IPCSclearPulse(IPCScontrolStruct* IPCS);

#endif